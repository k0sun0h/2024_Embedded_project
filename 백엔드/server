const express = require('express');
const mysql = require('mysql');

const app = express();
const port = 3000; // API가 실행될 포트

app.use(express.json()); // JSON 바디를 파싱하기 위한 미들웨어

// MySQL 연결 생성
const connection = mysql.createConnection({
  host: 'localhost',
  user: 'root',
  password: 'tlsgusqls77',
  database: 'SmartConceptDoor',
  port: 3306
});

// MySQL 연결 끊김 처리 함수
function handleDisconnect(connection) {
  connection.on('error', function (err) {
    if (!err.fatal) {
      return;
    }

    if (err.code !== 'PROTOCOL_CONNECTION_LOST') {
      throw err;
    }

    console.log('재연결 중: ' + err.stack);

    connection = mysql.createConnection(connection.config);
    handleDisconnect(connection);
    connection.connect();
  });
}

// MySQL에 연결하고 끊김 처리
connection.connect((err) => {
  if (err) {
    console.error('MySQL 연결 오류:', err.stack);
    return;
  }
  console.log('MySQL에 연결됨, ID:', connection.threadId);
  handleDisconnect(connection);
});

// 쿼리 결과로 HTML 테이블 생성 함수
function generateHtmlTable(results) {
  let html = '<table border="1">';
  // 테이블 헤더 추가
  html += '<tr>';
  for (const column in results[0]) {
    html += `<th>${column}</th>`;
  }
  html += '</tr>';
  // 테이블 행 추가
  results.forEach(row => {
    html += '<tr>';
    for (const column in row) {
      html += `<td>${row[column]}</td>`;
    }
    html += '</tr>';
  });
  html += '</table>';
  return html;
}

// 간단한 라우트 정의
app.get('/', (req, res) => {
  res.send(`
    <!DOCTYPE html>
    <html lang="en">
    <head>
      <meta charset="UTF-8">
      <meta name="viewport" content="width=device-width, initial-scale=1.0">
      <title>Smart Concept Door API</title>
    </head>
    <body>
      <h1>Smart Concept Door API에 오신 것을 환영합니다</h1>
      <button onclick="fetchTableData('users')">사용자 정보 가져오기</button>
      <button onclick="fetchTableData('wifi_connections')">WiFi 연결 상태 가져오기</button>
      <button onclick="fetchTableData('iot_devices_status')">IoT 장치 상태 가져오기</button>
      <button onclick="fetchTableData('door_status')">문 상태 가져오기</button>
      <button onclick="fetchTableData('macros')">매크로 가져오기</button>
      <div id="tableContainer"></div>

      <script>
        async function fetchTableData(tableName) {
          try {
            const response = await fetch('http://localhost:3000/' + tableName);
            const data = await response.text();
            document.getElementById('tableContainer').innerHTML = data;
          } catch (error) {
            console.error('테이블 데이터 가져오기 오류:', error);
          }
        }
      </script>
    </body>
    </html>
  `);
});

// 사용자 정보를 가져오는 라우트 정의
app.get('/users', (req, res) => {
  connection.query('SELECT * FROM User', (err, results) => {
    if (err) {
      console.error('쿼리 실행 오류:', err.stack);
      res.status(500).send('데이터 가져오기 오류');
      return;
    }
    const tableHtml = generateHtmlTable(results);
    res.send(tableHtml);
  });
});

// WiFi 연결 상태를 가져오는 라우트 정의
app.get('/wifi_connections', (req, res) => {
  connection.query('SELECT * FROM Wifi_Connection', (err, results) => {
    if (err) {
      console.error('쿼리 실행 오류:', err.stack);
      res.status(500).send('데이터 가져오기 오류');
      return;
    }
    const tableHtml = generateHtmlTable(results);
    res.send(tableHtml);
  });
});

// IoT 장치 상태를 가져오는 라우트 정의
app.get('/iot_devices_status', (req, res) => {
  connection.query('SELECT * FROM IoT_Devices_Status', (err, results) => {
    if (err) {
      console.error('쿼리 실행 오류:', err.stack);
      res.status(500).send('데이터 가져오기 오류');
      return;
    }
    const tableHtml = generateHtmlTable(results);
    res.send(tableHtml);
  });
});

// 문 상태를 가져오는 라우트 정의
app.get('/door_status', (req, res) => {
  connection.query('SELECT * FROM Door_Status', (err, results) => {
    if (err) {
      console.error('쿼리 실행 오류:', err.stack);
      res.status(500).send('데이터 가져오기 오류');
      return;
    }
    const tableHtml = generateHtmlTable(results);
    res.send(tableHtml);
  });
});

// 매크로 데이터를 가져오는 라우트 정의
app.get('/macros', (req, res) => {
  connection.query('SELECT * FROM Macro', (err, results) => {
    if (err) {
      console.error('쿼리 실행 오류:', err.stack);
      res.status(500).send('데이터 가져오기 오류');
      return;
    }
    const tableHtml = generateHtmlTable(results);
    res.send(tableHtml);
  });
});

// 서버 시작
app.listen(port, () => {
  console.log(`서버가 포트 ${port}에서 실행 중`);
});

// 종료 시 연결을 정상적으로 닫기
process.on('SIGINT', () => {
  connection.end((err) => {
    if (err) {
      console.error('연결 종료 오류:', err.stack);
    }
    console.log('MySQL 연결 종료');
    process.exit();
  });
});
